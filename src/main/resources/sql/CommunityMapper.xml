<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mapmory.services.community.dao.CommunityDao">

	<resultMap id="replySelectMap" type="Reply">
	    <result property="replyNo" 			column="reply_no"			jdbcType="INTEGER"/>
	    <result property="recordNo" 		column="record_no"			jdbcType="INTEGER"/>
	    <result property="userId" 			column="user_id"			jdbcType="VARCHAR"/>
	    <result property="replyText" 		column="reply_text"			jdbcType="VARCHAR"/>
	    <result property="replyImageName" 	column="reply_image_name"	jdbcType="VARCHAR"/>
	    <result property="replyDate" 		column="reply_date"			jdbcType="TIMESTAMP"/>
	    <result property="replyUpdateDate" 	column="reply_update_date"	jdbcType="TIMESTAMP"/>
	</resultMap>
	
	<resultMap id="communityLogsSelectMap" type="communityLogs">
		<result property="communityLogsNo"	column="community_logs_no"	jdbcType="INTEGER"/>
		<result property="userId"			column="user_id"			jdbcType="VARCHAR"/>
		<result property="recordNo"			column="record_no"			jdbcType="INTEGER"/>
		<result property="replyNo"			column="reply_no"			jdbcType="INTEGER"/>
		<result property="logsType"			column="logs_type"			jdbcType="INTEGER"/>
	</resultMap>
	
	<resultMap id="reportSelectMap" type="report">
		<result property="reportNo"			column="report_no"			jdbcType="INTEGER"/>
		<result property="userId"			column="user_id"			jdbcType="VARCHAR"/>
		<result property="targetUserId"		column="target_user_id"		jdbcType="VARCHAR"/>
		<result property="recordNo"			column="record_no"			jdbcType="INTEGER"/>
		<result property="replyNo"			column="reply_no"			jdbcType="INTEGER"/>
		<result property="chatroomNo"		column="chatroom_no"		jdbcType="INTEGER"/>
		<result property="reportTitle"		column="report_title"		jdbcType="VARCHAR"/>
		<result property="reportText"		column="report_text"		jdbcType="VARCHAR"/>
		<result property="reportDate"		column="report_date"		jdbcType="TIMESTAMP"/>
		<result property="reportStatus"		column="report_status"		jdbcType="INTEGER"/>
		<result property="reportResult"		column="report_result"		jdbcType="INTEGER"/>
	</resultMap>

	<resultMap id="followBlockSelectMap" type="followBlock">
		<result property="userId"			column="user_id"			jdbcType="VARCHAR"/>
		<result property="targetId"			column="target_id"			jdbcType="VARCHAR"/>
		<result property="fb_type"			column="fb_type"			jdbcType="INTEGER"/>
	</resultMap>


	<!-- 댓글 목록 조회 -->
	<select id="getReplyList" parameterType="search" resultMap="replySelectMap">
		SELECT *,
			(SELECT nickname FROM users u WHERE u.USER_ID = r2.USER_ID),
			(SELECT profile_image_name FROM users u WHERE u.USER_ID = r2.USER_ID),
			CASE WHEN (SELECT subscription_end_date FROM SUBSCRIPTION s WHERE s.USER_ID = r2.USER_ID) > CURRENT_DATE THEN 1 ELSE 0 END,
			(SELECT record_no FROM record r WHERE r.RECORD_NO = r2.RECORD_NO)
		FROM REPLY r2
		WHERE r2.record_no = #{recordNo}
		ORDER BY reply_date ASC
<!-- 		LIMIT #{limit} OFFSET #{offset} -->
	</select>

	<!-- 내가 쓴 댓글 목록 조회 -->
	<select id="getUserReplyList" parameterType="search" resultMap="replySelectMap">
		SELECT *,
			(SELECT nickname FROM users u WHERE u.USER_ID = r2.USER_ID),
			(SELECT profile_image_name FROM users u WHERE u.USER_ID = r2.USER_ID),
			CASE WHEN (SELECT subscription_end_date FROM SUBSCRIPTION s WHERE s.USER_ID = r2.USER_ID) > CURRENT_DATE THEN 1 ELSE 0 END,
			(SELECT user_id FROM users u WHERE u.user_id = r2.user_id)
		FROM REPLY r2
		WHERE r2.user_id = #{userId}
		ORDER BY reply_date
<!-- 		LIMIT #{limit} OFFSET #{offset} -->
	</select>

	<!-- 댓글 작성 -->
	<insert id="addReply" parameterType="reply">
		INSERT INTO REPLY (record_no, user_id, reply_text, reply_image_name)
		VALUES(#{recordNo}, #{userId}, #{replyText}, #{replyImageName})
	</insert>
	
	<!-- 댓글 선택 -->
	<select id="getReply" parameterType="int" resultMap="replySelectMap">
		SELECT reply_no, record_no, user_id, reply_text, reply_image_name, reply_date, reply_update_date
		FROM REPLY
		WHERE reply_no = #{replyNo}
	</select>
	
	<!-- 댓글 수정 -->
	<update id="updateReply" parameterType="reply">
		UPDATE REPLY 
			<set> 
				<if test = "replyText != null"> reply_text = #{replyText}, </if>
				reply_image_name = #{replyImageName},
				reply_update_date = current_timestamp
			</set>   
		WHERE reply_no = #{replyNo}
	</update>

	<!-- 댓글 삭제 -->	
	<delete id="deleteReply" parameterType="reply">
		DELETE FROM REPLY
		WHERE user_id = #{userId:VARCHAR} AND reply_no = #{replyNo}
	</delete>	
	
	<!-- 기록에 작성된 댓글 Count -->
	<select id="getReplyTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM REPLY
		WHERE record_no = #{recordNo}
	</select>
	
	<!-- 사용자가 작성한 댓글 Count -->
	<select id="getReplyUserTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM REPLY
		WHERE user_id = #{userId}
	</select>	

	<!-- 커뮤니티 활동 추가 -->
	<insert id="addCommunityLogs" parameterType="CommunityLogs">
		INSERT INTO COMMUNITY_LOGS (user_id, record_no, reply_no, logs_type)
		VALUES(#{userId}, #{recordNo}, #{replyNo}, #{logsType})
	</insert>		
	
	<!--  커뮤니티 활동 로그 선택 -->
	<select id="getCommunityLogs" parameterType="int" resultMap="communityLogsSelectMap">
		SELECT *
		FROM COMMUNITY_LOGS
		WHERE community_logs_no = #{communityLogsNo}
	</select>

	<!--  커뮤니티 활동 수정 -->
	<update id="updateCommunityLogs" parameterType="CommunityLogs">
		UPDATE COMMUNITY_LOGS
		<set>
			logs_type = #{logsType}
		</set>
		WHERE community_logs_no = #{communityLogsNo}
	</update>

	<!-- 커뮤니티 활동 삭제 -->
	<delete id="deleteCommunityLogs" parameterType="communityLogs">
		DELETE FROM COMMUNITY_LOGS
		WHERE community_logs_no = #{communityLogsNo} AND user_id = #{userId} 
	</delete>

	<!-- 커뮤니티 활동 목록 조회 -->
	<select id="getCommunityLogsList" parameterType="search" resultMap="communityLogsSelectMap">
		SELECT *
		FROM COMMUNITY_LOGS
		WHERE user_id = #{userId} AND logs_type = #{logsType}
<!-- 		LIMIT #{limit} OFFSET #{offset} -->
	</select>
	
	<!-- 신고 정보 가져오기 -->
	<select id="addReport" parameterType="report" resultType="map">
		SELECT user_id, target_user_id, record_no, reply_no, chatroom_no,
			(CASE WHEN record_no IS NOT NULL THEN (SELECT r2.record_text FROM record r2 WHERE r2.record_no = r1.record_no) ELSE NULL END),
			(CASE WHEN reply_no IS NOT NULL THEN (SELECT r3.reply_text FROM REPLY r3 WHERE r3.reply_no = r1.reply_no) ELSE NULL END)
		FROM REPORT r1
		WHERE r1.report_no = #{reportNo}	
	</select>		

	<!-- 신고하기 -->
	<insert id="doReport" parameterType="report">
		INSERT INTO REPORT (user_id, target_user_id, record_no, reply_no, chatroom_no, report_title, report_text)
		VALUES (#{userId}, #{targetUserId}, #{recordNo}, #{replyNo}, #{chatroomNo}, #{reportTitle}, #{reportText})
	</insert>	

	<!--  사용자 신고 리스트 조회 -->
	<select id="getUSerReportList" parameterType="search" resultMap="reportSelectMap">
		SELECT *
		FROM REPORT
		WHERE user_id = #{userId}
		<!-- 		LIMIT #{limit} OFFSET #{offset} -->
	</select>

	<!--  전체 신고 리스트 조회 -->
	<select id="getAdminReportList" parameterType="search" resultMap="reportSelectMap">
		SELECT *
		FROM REPORT
		<!-- 		LIMIT #{limit} OFFSET #{offset} -->
	</select>

	<!-- 사용자의 신고 Count -->
	<select id="getUserReportTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM REPORT
		WHERE user_id = #{userId}
	</select>

	<!-- 신고 총 Count -->
	<select id="getAdminReportTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM REPORT
	</select>

	<!-- 신고 조회 -->			
	<select id="getReport" parameterType="int" resultMap="reportSelectMap">
		SELECT *
		FROM REPORT
		WHERE report_no = #{reportNo}
	</select>

	<!-- 관리자의 신고 처리 -->			
	<update id="confirmReport" parameterType="report">
		UPDATE REPORT
		<set>
			report_status = #{reportStatus}
			report_result = #{reportResult}
		</set>
		WHERE report_no = #{reportNo}
	</update>
	
	<!-- 사용자 차단 -->			
	<insert id="addBlockUser" parameterType="followBlock">
		INSERT INTO follow_block(user_id, target_id, fb_type)
		VALUES(#{userId}, #{targetId}, #{fb_type})
	</insert>	

	<!-- 차단 목록 조회 -->			
	<select id="getBlockedList" parameterType="search" resultMap="followBlockSelectMap">
		SELECT user_id, target_id, fb_type 
		FROM follow_block
		WHERE user_id = #{userId} AND fb_type = 1
				<!-- 		LIMIT #{limit} OFFSET #{offset} -->
	</select>

	<!-- 사용자의 차단 Count -->
	<select id="getBlockedTotalCount" parameterType="search" resultType="int">
		SELECT COUNT(*) FROM follow_block
		WHERE user_id = #{userId} AND fb_type = 1
	</select>
	
	<!-- 차단 상세 조회 -->			
	<select id="getBlockedUser" parameterType="java.lang.String" resultMap="followBlockSelectMap">
		SELECT user_id, target_id, fb_type 
		FROM follow_block
		WHERE user_id = #{userId} AND target_id = #{targetId} AND fb_type = 1
	</select>
	
	<!-- 차단 해제 -->			
	<delete id="deleteBlockedUser" parameterType="followBlock">
		DELETE FROM follow_block
		WHERE user_id = #{userId} AND target_id = #{targetId}	
	</delete>


	
</mapper>